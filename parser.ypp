%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <cmath>
#include <map>

//#include "haskell.hpp"

#define YYDEBUG 1

using namespace std;
void yyerror(string message) {
    cerr<<message<<endl;
    exit(EXIT_FAILURE);
}

void obradi(string s){
    string s1 = s.substr(6);
    cout<<s1<<endl;

}

float broj=0;

  // leksicki analizator
extern int yylex();

map<string, float> m1;

void setValue(string s, float x){
    map<string, float>::iterator i= m1.find(s);
    if (i == m1.end()){
        m1[s] = x;
        cout<<"New variable defined"<<endl;
    }
    else{
        m1[s] = x;
        cout<<"Variable redefined"<<endl;
    }
}


%}



%union{
    string *s;
    float num;
}
%token  it_token let_token 
%token <num> num_token div_token mod_token sqrt_token abs_token
%token <s> Stampa id_token

%type <num> Izraz


%left '+' '-'
%left '*' '/' div_token mod_token
%left UMINUS
%left abs_token sqrt_token

%%

Program: Program Line '\n'   { }
| Line  '\n' { }
;

Line: Stampa    {obradi(*$1);}
| let_token id_token '=' Izraz { setValue(*$2,$4); broj = $4;  }
| Izraz         {cout<<$1<<endl; broj = $1;}
| it_token      {cout<<broj<<endl;}
;

Izraz: Izraz '+' Izraz {$$ = $1 + $3;}
| Izraz '-' Izraz {$$ = $1 - $3;}
| Izraz '*' Izraz {$$ = $1 * $3;}
| Izraz '/' Izraz {if($3!=0) 
                    $$ = $1 / $3;
                   else
                    yyerror("Deljenje nulom");
                  }
| Izraz mod_token Izraz {$$ = (float)((int)$1 % (int)$3);}
| Izraz div_token Izraz {$$ = (float)((int)($1 / $3));}
| sqrt_token Izraz  { $$ = sqrt($2); }
| '(' Izraz ')' {$$=$2;}
| abs_token Izraz { $$ = abs($2);}
| '-' Izraz %prec UMINUS {$$=-$2;}
| num_token {$$ = $1;}
| id_token  {
             map<string, float>::iterator i=m1.find(*$1);
             if(i==m1.end())
                yyerror("nije definisano");
              //cout<<*$1<<" nije definisana"<<endl;
            
                $$=i->second;
            }
             
;


%%

int main(){
    //yydebug=1;
    yyparse();
    exit(EXIT_SUCCESS);
}
